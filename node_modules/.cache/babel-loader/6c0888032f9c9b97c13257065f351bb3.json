{"ast":null,"code":"import _slicedToArray from \"/Users/anamata/Documents/GitHub/react-boggle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anamata/Documents/GitHub/react-boggle/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport dictionary from './full-wordlist.json';\nimport solver from './boggle.js';\nimport ReactTimer from \"@xendora/react-timer\";\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        boggleboard = _useState2[0],\n        setboggleboard = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isVisible = _useState4[0],\n        setIsVisible = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        boggleSolution = _useState6[0],\n        setBoggleSolution = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        boggleSolutionMap = _useState8[0],\n        setBoggleSolutionMap = _useState8[1];\n\n  const _useState9 = useState(new Set()),\n        _useState10 = _slicedToArray(_useState9, 2),\n        wordsFound = _useState10[0],\n        setWordsFound = _useState10[1];\n\n  const _useState11 = useState(null),\n        _useState12 = _slicedToArray(_useState11, 2),\n        alreadyFound = _useState12[0],\n        setAlreadyFound = _useState12[1];\n\n  const _useState13 = useState(true),\n        _useState14 = _slicedToArray(_useState13, 2),\n        textFieldState = _useState14[0],\n        setTextFieldState = _useState14[1];\n\n  const _useState15 = useState(0),\n        _useState16 = _slicedToArray(_useState15, 2),\n        wordsLeft = _useState16[0],\n        setWordsLeft = _useState16[1];\n\n  const listClasses = listUseStyles();\n  let i = 0; // Returns a random 5x5 board, using the official letter distribution.\n\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\", \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\", \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\", \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\", \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard() {\n    const board = RandomGrid();\n    const solution = solver(board, dictionary.words);\n    let solutionSet = new Set();\n\n    for (let i = 0; i < solution.length; i++) {\n      solutionSet.add(solution[i]);\n    }\n\n    setBoggleSolution(new Set(solution));\n    setBoggleSolutionMap(solution);\n    setIsVisible(!isVisible);\n    setWordsFound(new Set());\n    setWordsLeft(solution.length);\n    setTextFieldState(true);\n    setAlreadyFound(null);\n  }\n\n  function recieveInput(value) {\n    if (boggleSolution.has(value.toUpperCase())) {\n      if (wordsFound.has(value)) {\n        setAlreadyFound(value);\n      } else {\n        setWordsFound(new Set([...wordsFound, value]));\n        setWordsLeft(wordsLeft - 1);\n      }\n    }\n  }\n\n  function endGame() {\n    setWordsFound(new Set(boggleSolution));\n    setTextFieldState(false);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \" SLOW BOGGLE! \"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \" Sit back and enjoy the extra seconds :)\"), setTextFieldState && isVisible && React.createElement(ReactTimer, {\n    interval: 800,\n    start: 50,\n    end: t => t === 0,\n    onTick: t => t - 1,\n    onEnd: tickevent => endGame(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, time => React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Time left: \", time)), alreadyFound && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"\\\"You already found \", alreadyFound, \"!\\\"\"), React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, boggleboard && isVisible && React.createElement(NestedGrid, {\n    grid: boggleboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, textFieldState && isVisible && React.createElement(TextField, {\n    justify: \"center\",\n    id: \"input\",\n    onChange: inputEvent => recieveInput(inputEvent.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), !textFieldState && React.createElement(TextField, {\n    justify: \"center\",\n    disabled: true,\n    id: \"disabled\",\n    label: \"GAME OVER\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: toggleBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, isVisible ? 'New Board' : 'Play!'), isVisible && React.createElement(\"button\", {\n    onClick: endGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"End Game\"), isVisible && React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Words remaining: \", wordsLeft), isVisible && boggleSolution && React.createElement(List, {\n    className: listClasses.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, [0].map(sectionId => React.createElement(\"li\", {\n    className: listClasses.listSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, boggleSolutionMap.map(item => React.createElement(ListItemText, {\n    primary: Array.from(wordsFound)[i++],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })))))));\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n})); //Material UI nested grid\n\nfunction NestedGrid({\n  grid\n}) {\n  const classes = useStyles();\n\n  function FormRow({\n    arr\n  }) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, arr[0])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, arr[1])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, arr[2])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, arr[3])));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }))));\n}\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300\n  },\n  listSection: {\n    backgroundColor: 'inherit'\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0\n  }\n}));\nexport default App;","map":{"version":3,"sources":["/Users/anamata/Documents/GitHub/react-boggle/src/App.js"],"names":["React","useState","makeStyles","Paper","Grid","Container","TextField","List","ListItemText","dictionary","solver","ReactTimer","App","boggleboard","setboggleboard","isVisible","setIsVisible","boggleSolution","setBoggleSolution","boggleSolutionMap","setBoggleSolutionMap","Set","wordsFound","setWordsFound","alreadyFound","setAlreadyFound","textFieldState","setTextFieldState","wordsLeft","setWordsLeft","listClasses","listUseStyles","i","RandomGrid","dice","chars","map","cube","Math","floor","random","length","sort","SIZE","grid","row","col","toggleBoard","board","solution","words","solutionSet","add","recieveInput","value","has","toUpperCase","endGame","t","tickevent","time","inputEvent","target","root","sectionId","listSection","item","Array","from","useStyles","theme","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","NestedGrid","classes","FormRow","arr","width","maxWidth","backgroundColor","background","position","overflow","maxHeight","ul"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport dictionary from './full-wordlist.json'\nimport solver from './boggle.js'\nimport ReactTimer from \"@xendora/react-timer\";\n\n\nfunction App() {\n  const [boggleboard, setboggleboard] = useState(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [boggleSolution, setBoggleSolution] = useState(null);\n  const [boggleSolutionMap, setBoggleSolutionMap] = useState(null);\n  const [wordsFound, setWordsFound] = useState(new Set());\n  const [alreadyFound, setAlreadyFound] = useState(null);\n  const [textFieldState, setTextFieldState] = useState(true);\n  const [wordsLeft, setWordsLeft] = useState(0);\n\n  const listClasses = listUseStyles();\n  let i = 0;\n\n  // Returns a random 5x5 board, using the official letter distribution.\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\",\n                  \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\",\n                  \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\",\n                  \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\",\n                  \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard(){\n    const board = RandomGrid();\n    const solution = solver(board,dictionary.words);\n    let solutionSet = new Set();\n\n    for(let i =0; i<solution.length; i++){\n      solutionSet.add(solution[i])\n    }\n\n    setBoggleSolution(new Set(solution));\n    setBoggleSolutionMap(solution);\n    setIsVisible(!isVisible);\n    setWordsFound(new Set());\n    setWordsLeft(solution.length);\n    setTextFieldState(true);\n    setAlreadyFound(null);\n  }\n\n  function recieveInput(value){\n    if(boggleSolution.has(value.toUpperCase())){\n      if(wordsFound.has(value)){\n        setAlreadyFound(value);\n      }else{\n        setWordsFound(new Set([...wordsFound, value]));\n        setWordsLeft(wordsLeft-1);\n      }\n    }\n  }\n\n  function endGame(){\n    setWordsFound(new Set(boggleSolution));\n    setTextFieldState(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2> SLOW BOGGLE! </h2>\n        <h5> Sit back and enjoy the extra seconds :)</h5>\n        {setTextFieldState && isVisible && <ReactTimer interval={800} start={50} end={t => t === 0} onTick={t => t - 1} onEnd={tickevent => endGame()}>\n        {time => <h5>Time left: {time}</h5>}\n        </ReactTimer>}\n        {alreadyFound && <p>\"You already found {alreadyFound}!\"</p>}\n        <Container maxWidth=\"md\">\n        {boggleboard && isVisible && <NestedGrid grid={boggleboard}/>}\n        </Container>\n        <Container maxWidth=\"md\">\n        {textFieldState && isVisible && <TextField justify=\"center\" id=\"input\" onChange={inputEvent => recieveInput(inputEvent.target.value)}/>}\n        {!textFieldState && <TextField justify=\"center\" disabled id=\"disabled\" label=\"GAME OVER\"/>}\n        </Container>\n        <button onClick={toggleBoard}>\n        {isVisible ?\n          ('New Board') :\n          ('Play!')\n        }\n        </button>\n        {isVisible && <button onClick={endGame}>\n          End Game\n        </button>}\n        {isVisible && <h5>Words remaining: {wordsLeft}</h5>}\n        {isVisible && boggleSolution && <List className={listClasses.root}>\n        {[0].map(sectionId =>\n          <li className={listClasses.listSection}>\n              {boggleSolutionMap.map(item => (\n                  <ListItemText primary={Array.from(wordsFound)[i++]} />\n              ))}\n          </li>\n        )}\n        </List>}\n      </header>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n//Material UI nested grid\nfunction NestedGrid({grid}) {\n  const classes = useStyles();\n\n  function FormRow({arr}) {\n    return (\n      <React.Fragment>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[0]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[1]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[2]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[3]}</Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n  return (\n    <div className={classes.root}>\n      <Grid container justify=\"center\" spacing={2}>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[0]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[1]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[2]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[3]}/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300,\n  },\n  listSection: {\n    backgroundColor: 'inherit',\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0,\n  },\n}));\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}