{"ast":null,"code":"import _slicedToArray from \"/Users/anamata/Desktop/react-boggle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anamata/Desktop/react-boggle/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport dictionary from './full-wordlist.json';\nimport solver from './boggle.js';\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        boggleboard = _useState2[0],\n        setboggleboard = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isVisible = _useState4[0],\n        setIsVisible = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        boggleSolution = _useState6[0],\n        setBoggleSolution = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        wordsFound = _useState8[0],\n        setWordsFound = _useState8[1];\n\n  const listClasses = listUseStyles();\n  const classes = useStyles();\n  let i = 0; // Returns a random 5x5 board, using the official letter distribution.\n\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\", \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\", \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\", \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\", \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard() {\n    const board = RandomGrid();\n    const solution = solver(board, dictionary.words);\n    let solutionSet = new Set();\n\n    for (let i = 0; i < solution.length; i++) {\n      solutionSet.add(solution[i]);\n    }\n\n    setBoggleSolution(solution);\n    setIsVisible(!isVisible);\n  }\n\n  function recieveInput(value) {\n    console.log(boggleSolution);\n\n    for (let j = 0; j < boggleSolution.length; j++) {\n      if (boggleSolution[j].toUpperCase === value.toUpperCase) {\n        setWordsFound([...wordsFound, value]);\n      }\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, boggleboard && isVisible && React.createElement(NestedGrid, {\n    grid: boggleboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    justify: \"center\",\n    id: \"standard-basic\",\n    onChange: inputEvent => recieveInput(inputEvent.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: toggleBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, isVisible ? 'End' : 'Play!'), isVisible && boggleSolution && React.createElement(List, {\n    className: listClasses.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, boggleSolution.map(sectionId => React.createElement(\"li\", {\n    className: listClasses.listSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, boggleSolution.map(item => React.createElement(ListItemText, {\n    primary: wordsFound[i++],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })))))));\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n}));\n\nfunction NestedGrid({\n  grid\n}) {\n  const classes = useStyles();\n\n  function FormRow({\n    arr\n  }) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, arr[0])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, arr[1])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, arr[2])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, arr[3])));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }))));\n}\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300\n  },\n  listSection: {\n    backgroundColor: 'inherit'\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0\n  }\n}));\nexport default App;","map":{"version":3,"sources":["/Users/anamata/Desktop/react-boggle/src/App.js"],"names":["React","useState","useEffect","makeStyles","Paper","Grid","Container","TextField","List","ListItem","ListItemText","ListSubheader","dictionary","solver","App","boggleboard","setboggleboard","isVisible","setIsVisible","boggleSolution","setBoggleSolution","wordsFound","setWordsFound","listClasses","listUseStyles","classes","useStyles","i","RandomGrid","dice","chars","map","cube","Math","floor","random","length","sort","SIZE","grid","row","col","toggleBoard","board","solution","words","solutionSet","Set","add","recieveInput","value","console","log","j","toUpperCase","inputEvent","target","root","sectionId","listSection","item","theme","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","NestedGrid","FormRow","arr","width","maxWidth","backgroundColor","background","position","overflow","maxHeight","ul"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport dictionary from './full-wordlist.json'\nimport solver from './boggle.js'\n\n\nfunction App() {\n  const [boggleboard, setboggleboard] = useState(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [boggleSolution, setBoggleSolution] = useState(null);\n  const [wordsFound, setWordsFound] = useState([]);\n\n  const listClasses = listUseStyles();\n  const classes = useStyles();\n  let i = 0;\n\n  // Returns a random 5x5 board, using the official letter distribution.\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\",\n                  \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\",\n                  \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\",\n                  \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\",\n                  \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard(){\n    const board = RandomGrid();\n    const solution = solver(board,dictionary.words);\n    let solutionSet = new Set();\n\n    for(let i =0; i<solution.length; i++){\n      solutionSet.add(solution[i])\n    }\n\n    setBoggleSolution(solution);\n    setIsVisible(!isVisible);\n  }\n\n  function recieveInput(value){\n    console.log(boggleSolution)\n    for(let j=0; j<boggleSolution.length; j++){\n      if(boggleSolution[j].toUpperCase === value.toUpperCase){\n        setWordsFound([...wordsFound, value]);\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Container maxWidth=\"md\">\n      {boggleboard && isVisible && <NestedGrid grid={boggleboard}/>}\n      </Container>\n      <Container maxWidth=\"md\">\n      <TextField justify=\"center\" id=\"standard-basic\" onChange = {inputEvent => recieveInput(inputEvent.target.value)}/>\n      </Container>\n      <button onClick={toggleBoard}>\n      {isVisible ?\n        ('End') :\n        ('Play!')\n      }\n      </button>\n      {isVisible && boggleSolution && <List className={listClasses.root}>\n      {boggleSolution.map(sectionId => (\n        <li className={listClasses.listSection}>\n            {boggleSolution.map(item => (\n                <ListItemText primary={wordsFound[i++]} />\n            ))}\n        </li>\n      ))}\n      </List>}\n      </header>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction NestedGrid({grid}) {\n  const classes = useStyles();\n\n  function FormRow({arr}) {\n    return (\n      <React.Fragment>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[0]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[1]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[2]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[3]}</Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n  return (\n    <div className={classes.root}>\n      <Grid container justify=\"center\" spacing={2}>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[0]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[1]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[2]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[3]}/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300,\n  },\n  listSection: {\n    backgroundColor: 'inherit',\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0,\n  },\n}));\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}