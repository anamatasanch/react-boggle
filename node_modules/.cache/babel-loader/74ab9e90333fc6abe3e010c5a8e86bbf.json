{"ast":null,"code":"import _slicedToArray from \"/Users/anamata/Desktop/react-boggle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anamata/Desktop/react-boggle/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport dictionary from './full-wordlist.json';\nimport solver from './boggle.js';\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        boggleboard = _useState2[0],\n        setboggleboard = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isVisible = _useState4[0],\n        setIsVisible = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        boggleSolution = _useState6[0],\n        setBoggleSolution = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        boggleSolutionMap = _useState8[0],\n        setBoggleSolutionMap = _useState8[1];\n\n  const _useState9 = useState(new Set()),\n        _useState10 = _slicedToArray(_useState9, 2),\n        wordsFound = _useState10[0],\n        setWordsFound = _useState10[1];\n\n  const _useState11 = useState(null),\n        _useState12 = _slicedToArray(_useState11, 2),\n        alreadyFound = _useState12[0],\n        setAlreadyFound = _useState12[1];\n\n  const _useState13 = useState(true),\n        _useState14 = _slicedToArray(_useState13, 2),\n        textFieldState = _useState14[0],\n        setTextFieldState = _useState14[1]; //const [seconds, setSeconds] = useState(3);\n  //const [minutes, setMinutes] = useState(0);\n\n\n  const _useState15 = useState(true),\n        _useState16 = _slicedToArray(_useState15, 2),\n        timeNotEnded = _useState16[0],\n        setTimeNotEnded = _useState16[1];\n\n  let timerID;\n  const listClasses = listUseStyles();\n  const classes = useStyles();\n  let i = 0; // Returns a random 5x5 board, using the official letter distribution.\n\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\", \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\", \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\", \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\", \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n\n    console.log('building boggle board');\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard() {\n    const board = RandomGrid();\n    const solution = solver(board, dictionary.words);\n    let solutionSet = new Set();\n\n    for (let i = 0; i < solution.length; i++) {\n      solutionSet.add(solution[i]);\n    }\n\n    setBoggleSolution(new Set(solution));\n    setBoggleSolutionMap(solution);\n    setIsVisible(!isVisible);\n    setWordsFound(new Set());\n    setTextFieldState(true);\n    setAlreadyFound(null);\n  }\n\n  function recieveInput(value) {\n    if (boggleSolution.has(value.toUpperCase())) {\n      if (wordsFound.has(value)) {\n        setAlreadyFound(value);\n      } else {\n        setWordsFound(new Set([...wordsFound, value]));\n      }\n    }\n  }\n\n  function endGame() {\n    console.log(\"noice\");\n    setWordsFound(new Set(boggleSolution));\n    setTextFieldState(false);\n  } //Clock\n\n\n  function Clock(timerID) {\n    let minutes = 3;\n    let seconds = 0;\n    timerID = setInterval(() => {\n      console.log(minutes, seconds);\n\n      if (seconds === 0) {\n        if (minutes === 0) {\n          endGame();\n          clearInterval(timerID);\n          setTimeNotEnded(false);\n        } else {\n          minutes = minutes - 1;\n          seconds = 59;\n        }\n      } else {\n        seconds = seconds - 1;\n      }\n    }, 1000);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, minutes, \":\", seconds));\n  } //\n\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \" SLOW BOGGLE! \"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \" Sit back and enjoy the extra seconds :)\"), timeNotEnded ? Clock(timerID) : clearInterval(timerID), \"//\", timeNotEnded && renderr(), alreadyFound && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"\\\"You already found \", alreadyFound, \"!\\\"\"), React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, boggleboard && isVisible && React.createElement(NestedGrid, {\n    grid: boggleboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })), React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, textFieldState && isVisible && React.createElement(TextField, {\n    justify: \"center\",\n    id: \"input\",\n    onChange: inputEvent => recieveInput(inputEvent.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), !textFieldState && React.createElement(TextField, {\n    justify: \"center\",\n    disabled: true,\n    id: \"disabled\",\n    label: \"GAME OVER\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: toggleBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, isVisible ? 'New Board' : 'Play!'), isVisible && React.createElement(\"button\", {\n    onClick: endGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"End Game\"), isVisible && boggleSolution && React.createElement(List, {\n    className: listClasses.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, [0].map(sectionId => React.createElement(\"li\", {\n    className: listClasses.listSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, boggleSolutionMap.map(item => React.createElement(ListItemText, {\n    primary: Array.from(wordsFound)[i++],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })))))));\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n})); //Material UI nested grid\n\nfunction NestedGrid({\n  grid\n}) {\n  const classes = useStyles();\n\n  function FormRow({\n    arr\n  }) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, arr[0])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, arr[1])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, arr[2])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, arr[3])));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }))));\n}\n\nfunction FormattedDate(props) {\n  return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, \"It is \", props.date.toLocaleTimeString(), \".\");\n}\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300\n  },\n  listSection: {\n    backgroundColor: 'inherit'\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0\n  }\n}));\nexport default App;","map":{"version":3,"sources":["/Users/anamata/Desktop/react-boggle/src/App.js"],"names":["React","useState","useEffect","makeStyles","Paper","Grid","Container","TextField","List","ListItem","ListItemText","ListSubheader","dictionary","solver","App","boggleboard","setboggleboard","isVisible","setIsVisible","boggleSolution","setBoggleSolution","boggleSolutionMap","setBoggleSolutionMap","Set","wordsFound","setWordsFound","alreadyFound","setAlreadyFound","textFieldState","setTextFieldState","timeNotEnded","setTimeNotEnded","timerID","listClasses","listUseStyles","classes","useStyles","i","RandomGrid","dice","chars","map","cube","Math","floor","random","length","sort","SIZE","grid","row","col","console","log","toggleBoard","board","solution","words","solutionSet","add","recieveInput","value","has","toUpperCase","endGame","Clock","minutes","seconds","setInterval","clearInterval","renderr","inputEvent","target","root","sectionId","listSection","item","Array","from","theme","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","NestedGrid","FormRow","arr","FormattedDate","props","date","toLocaleTimeString","width","maxWidth","backgroundColor","background","position","overflow","maxHeight","ul"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport dictionary from './full-wordlist.json'\nimport solver from './boggle.js'\n\nfunction App() {\n  const [boggleboard, setboggleboard] = useState(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [boggleSolution, setBoggleSolution] = useState(null);\n  const [boggleSolutionMap, setBoggleSolutionMap] = useState(null);\n  const [wordsFound, setWordsFound] = useState(new Set());\n  const [alreadyFound, setAlreadyFound] = useState(null);\n  const [textFieldState, setTextFieldState] = useState(true);\n  //const [seconds, setSeconds] = useState(3);\n  //const [minutes, setMinutes] = useState(0);\n  const [timeNotEnded, setTimeNotEnded] = useState(true);\n  let timerID;\n\n  const listClasses = listUseStyles();\n  const classes = useStyles();\n  let i = 0;\n\n  // Returns a random 5x5 board, using the official letter distribution.\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\",\n                  \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\",\n                  \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\",\n                  \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\",\n                  \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n    console.log('building boggle board');\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard(){\n    const board = RandomGrid();\n    const solution = solver(board,dictionary.words);\n    let solutionSet = new Set();\n\n    for(let i =0; i<solution.length; i++){\n      solutionSet.add(solution[i])\n    }\n\n    setBoggleSolution(new Set(solution));\n    setBoggleSolutionMap(solution);\n    setIsVisible(!isVisible);\n    setWordsFound(new Set());\n    setTextFieldState(true);\n    setAlreadyFound(null);\n  }\n\n  function recieveInput(value){\n    if(boggleSolution.has(value.toUpperCase())){\n      if(wordsFound.has(value)){\n        setAlreadyFound(value);\n      }else{\n        setWordsFound(new Set([...wordsFound, value]));\n      }\n    }\n  }\n\n  function endGame(){\n    console.log(\"noice\");\n    setWordsFound(new Set(boggleSolution));\n    setTextFieldState(false);\n  }\n\n  //Clock\n  function Clock(timerID) {\n    let minutes = 3;\n    let seconds = 0;\n\n    timerID = setInterval(\n      () => {console.log(minutes,seconds);\n            if(seconds===0){\n              if(minutes===0){\n                endGame();\n                clearInterval(timerID);\n                setTimeNotEnded(false);\n              }else{\n                minutes = minutes-1;\n                seconds = 59;\n              }\n            }else{\n              seconds = seconds-1;\n            }},\n      1000)\n      return (\n        <div>\n          <h1>\n            {minutes}:{seconds}\n          </h1>\n        </div>\n      );\n  }\n\n  //\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2> SLOW BOGGLE! </h2>\n        <h5> Sit back and enjoy the extra seconds :)</h5>\n        {timeNotEnded ? Clock(timerID) : clearInterval(timerID)}\n        //{timeNotEnded && renderr()}\n        {alreadyFound && <p>\"You already found {alreadyFound}!\"</p>}\n        <Container maxWidth=\"md\">\n        {boggleboard && isVisible && <NestedGrid grid={boggleboard}/>}\n        </Container>\n        <Container maxWidth=\"md\">\n        {textFieldState && isVisible && <TextField justify=\"center\" id=\"input\" onChange={inputEvent => recieveInput(inputEvent.target.value)}/>}\n        {!textFieldState && <TextField justify=\"center\" disabled id=\"disabled\" label=\"GAME OVER\"/>}\n        </Container>\n        <button onClick={toggleBoard}>\n        {isVisible ?\n          ('New Board') :\n          ('Play!')\n        }\n        </button>\n        {isVisible && <button onClick={endGame}>\n          End Game\n        </button>}\n        {isVisible && boggleSolution && <List className={listClasses.root}>\n        {[0].map(sectionId =>\n          <li className={listClasses.listSection}>\n              {boggleSolutionMap.map(item => (\n                  <ListItemText primary={Array.from(wordsFound)[i++]} />\n              ))}\n          </li>\n        )}\n        </List>}\n      </header>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n//Material UI nested grid\nfunction NestedGrid({grid}) {\n  const classes = useStyles();\n\n  function FormRow({arr}) {\n    return (\n      <React.Fragment>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[0]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[1]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[2]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[3]}</Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n  return (\n    <div className={classes.root}>\n      <Grid container justify=\"center\" spacing={2}>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[0]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[1]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[2]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[3]}/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nfunction FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n\n\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300,\n  },\n  listSection: {\n    backgroundColor: 'inherit',\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0,\n  },\n}));\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}