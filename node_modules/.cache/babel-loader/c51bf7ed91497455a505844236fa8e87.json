{"ast":null,"code":"import _slicedToArray from \"/Users/anamata/Desktop/react-boggle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anamata/Desktop/react-boggle/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport dictionary from './full-wordlist.json';\nimport solver from './boggle.js';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        boggleboard = _useState2[0],\n        setboggleboard = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isVisible = _useState4[0],\n        setIsVisible = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        boggleSolution = _useState6[0],\n        setBoggleSolution = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        boggleSolutionMap = _useState8[0],\n        setBoggleSolutionMap = _useState8[1];\n\n  const _useState9 = useState(new Set()),\n        _useState10 = _slicedToArray(_useState9, 2),\n        wordsFound = _useState10[0],\n        setWordsFound = _useState10[1];\n\n  const _useState11 = useState(null),\n        _useState12 = _slicedToArray(_useState11, 2),\n        alreadyFound = _useState12[0],\n        setAlreadyFound = _useState12[1];\n\n  const _useState13 = useState(true),\n        _useState14 = _slicedToArray(_useState13, 2),\n        textFieldState = _useState14[0],\n        setTextFieldState = _useState14[1];\n\n  const _useState15 = useState(3),\n        _useState16 = _slicedToArray(_useState15, 2),\n        seconds = _useState16[0],\n        setSeconds = _useState16[1];\n\n  const _useState17 = useState(0),\n        _useState18 = _slicedToArray(_useState17, 2),\n        minutes = _useState18[0],\n        setMinutes = _useState18[1];\n\n  const _useState19 = useState(null),\n        _useState20 = _slicedToArray(_useState19, 2),\n        timerID = _useState20[0],\n        setTimerID = _useState20[1];\n\n  const listClasses = listUseStyles();\n  const classes = useStyles();\n  let i = 0; // Returns a random 5x5 board, using the official letter distribution.\n\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\", \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\", \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\", \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\", \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n\n    console.log('building boggle board');\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard() {\n    const board = RandomGrid();\n    const solution = solver(board, dictionary.words);\n    let solutionSet = new Set();\n\n    for (let i = 0; i < solution.length; i++) {\n      solutionSet.add(solution[i]);\n    }\n\n    setBoggleSolution(new Set(solution));\n    setBoggleSolutionMap(solution);\n    setIsVisible(!isVisible);\n    setWordsFound(new Set());\n    setTextFieldState(true);\n    setAlreadyFound(null);\n  }\n\n  function recieveInput(value) {\n    if (boggleSolution.has(value.toUpperCase())) {\n      if (wordsFound.has(value)) {\n        setAlreadyFound(value);\n      } else {\n        setWordsFound(new Set([...wordsFound, value]));\n      }\n    }\n  }\n\n  function endGame() {\n    console.log(\"noice\");\n    setWordsFound(new Set(boggleSolution));\n    setTextFieldState(false);\n  } //Clock\n\n\n  function Clock() {\n    setTimerID(setInterval(() => this.tick(), 1000));\n  }\n\n  function componentWillUnmount() {\n    clearInterval(timerID);\n  }\n\n  function tick() {\n    console.log(\"Bro\");\n\n    if (seconds == 0) {\n      if (minutes == 0) {\n        console.log(\"ended\");\n        endGame();\n        clearInterval(timerID);\n      } else {\n        setMinutes(minutes - 1);\n        setSeconds(59);\n      }\n    } else {\n      setSeconds(seconds - 1);\n    }\n  }\n\n  function render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.minutes, \":\", this.seconds));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \" SLOW BOGGLE! \"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \" Sit back and enjoy the extra seconds :)\"), Clock(), alreadyFound && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"\\\"You already found \", alreadyFound, \"!\\\"\"), React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, boggleboard && isVisible && React.createElement(NestedGrid, {\n    grid: boggleboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })), React.createElement(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, textFieldState && isVisible && React.createElement(TextField, {\n    justify: \"center\",\n    id: \"input\",\n    onChange: inputEvent => recieveInput(inputEvent.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), !textFieldState && React.createElement(TextField, {\n    justify: \"center\",\n    disabled: true,\n    id: \"disabled\",\n    label: \"GAME OVER\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: toggleBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, isVisible ? 'New Board' : 'Play!'), isVisible && React.createElement(\"button\", {\n    onClick: endGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"End Game\"), isVisible && boggleSolution && React.createElement(List, {\n    className: listClasses.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, [0].map(sectionId => React.createElement(\"li\", {\n    className: listClasses.listSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, boggleSolutionMap.map(item => React.createElement(ListItemText, {\n    primary: Array.from(wordsFound)[i++],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })))))));\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n})); //Material UI nested grid\n\nfunction NestedGrid({\n  grid\n}) {\n  const classes = useStyles();\n\n  function FormRow({\n    arr\n  }) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, arr[0])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, arr[1])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, arr[2])), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, arr[3])));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    item: true,\n    xs: 8,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(FormRow, {\n    arr: grid[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }))));\n}\n\nfunction FormattedDate(props) {\n  return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"It is \", props.date.toLocaleTimeString(), \".\");\n}\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300\n  },\n  listSection: {\n    backgroundColor: 'inherit'\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0\n  }\n}));\nexport default App;","map":{"version":3,"sources":["/Users/anamata/Desktop/react-boggle/src/App.js"],"names":["React","useState","useEffect","makeStyles","Paper","Grid","Container","TextField","List","ListItem","ListItemText","ListSubheader","dictionary","solver","ReactDOM","App","boggleboard","setboggleboard","isVisible","setIsVisible","boggleSolution","setBoggleSolution","boggleSolutionMap","setBoggleSolutionMap","Set","wordsFound","setWordsFound","alreadyFound","setAlreadyFound","textFieldState","setTextFieldState","seconds","setSeconds","minutes","setMinutes","timerID","setTimerID","listClasses","listUseStyles","classes","useStyles","i","RandomGrid","dice","chars","map","cube","Math","floor","random","length","sort","SIZE","grid","row","col","console","log","toggleBoard","board","solution","words","solutionSet","add","recieveInput","value","has","toUpperCase","endGame","Clock","setInterval","tick","componentWillUnmount","clearInterval","render","inputEvent","target","root","sectionId","listSection","item","Array","from","theme","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","NestedGrid","FormRow","arr","FormattedDate","props","date","toLocaleTimeString","width","maxWidth","backgroundColor","background","position","overflow","maxHeight","ul"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport dictionary from './full-wordlist.json'\nimport solver from './boggle.js'\nimport ReactDOM from 'react-dom';\n\n\nfunction App() {\n  const [boggleboard, setboggleboard] = useState(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [boggleSolution, setBoggleSolution] = useState(null);\n  const [boggleSolutionMap, setBoggleSolutionMap] = useState(null);\n  const [wordsFound, setWordsFound] = useState(new Set());\n  const [alreadyFound, setAlreadyFound] = useState(null);\n  const [textFieldState, setTextFieldState] = useState(true);\n  const [seconds, setSeconds] = useState(3);\n  const [minutes, setMinutes] = useState(0);\n  const [timerID, setTimerID] = useState(null);\n\n  const listClasses = listUseStyles();\n  const classes = useStyles();\n  let i = 0;\n\n  // Returns a random 5x5 board, using the official letter distribution.\n  function RandomGrid() {\n    // prettier-ignore\n    const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\",\n                  \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\",\n                  \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\",\n                  \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\",\n                  \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n    let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n    chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n    const SIZE = 4;\n    let grid = [];\n    for (let row = 0; row < SIZE; row++) {\n      grid[row] = [];\n      for (let col = 0; col < SIZE; ++col) {\n        grid[row][col] = chars[SIZE * row + col];\n        if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n      }\n    }\n    console.log('building boggle board');\n    setboggleboard(grid);\n    return grid;\n  }\n\n  function toggleBoard(){\n    const board = RandomGrid();\n    const solution = solver(board,dictionary.words);\n    let solutionSet = new Set();\n\n    for(let i =0; i<solution.length; i++){\n      solutionSet.add(solution[i])\n    }\n\n    setBoggleSolution(new Set(solution));\n    setBoggleSolutionMap(solution);\n    setIsVisible(!isVisible);\n    setWordsFound(new Set());\n    setTextFieldState(true);\n    setAlreadyFound(null);\n  }\n\n  function recieveInput(value){\n    if(boggleSolution.has(value.toUpperCase())){\n      if(wordsFound.has(value)){\n        setAlreadyFound(value);\n      }else{\n        setWordsFound(new Set([...wordsFound, value]));\n      }\n    }\n  }\n\n  function endGame(){\n    console.log(\"noice\");\n    setWordsFound(new Set(boggleSolution));\n    setTextFieldState(false);\n  }\n\n  //Clock\n  function Clock() {\n    setTimerID(setInterval(\n      () => this.tick(),\n      1000\n    ))\n  }\n\n  function componentWillUnmount() {\n    clearInterval(timerID);\n  }\n\n  function tick() {\n    console.log(\"Bro\")\n    if(seconds==0){\n      if(minutes==0){\n        console.log(\"ended\")\n        endGame();\n        clearInterval(timerID);\n      }else{\n        setMinutes(minutes-1);\n        setSeconds(59);\n      }\n    }else{\n      setSeconds(seconds-1);\n    }\n  }\n\n  function render() {\n      return (\n        <div>\n          <h1>\n            {this.minutes}:{this.seconds}\n          </h1>\n        </div>\n      );\n    }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2> SLOW BOGGLE! </h2>\n        <h5> Sit back and enjoy the extra seconds :)</h5>\n        {Clock()}\n        {alreadyFound && <p>\"You already found {alreadyFound}!\"</p>}\n        <Container maxWidth=\"md\">\n        {boggleboard && isVisible && <NestedGrid grid={boggleboard}/>}\n        </Container>\n        <Container maxWidth=\"md\">\n        {textFieldState && isVisible && <TextField justify=\"center\" id=\"input\" onChange={inputEvent => recieveInput(inputEvent.target.value)}/>}\n        {!textFieldState && <TextField justify=\"center\" disabled id=\"disabled\" label=\"GAME OVER\"/>}\n        </Container>\n        <button onClick={toggleBoard}>\n        {isVisible ?\n          ('New Board') :\n          ('Play!')\n        }\n        </button>\n        {isVisible && <button onClick={endGame}>\n          End Game\n        </button>}\n        {isVisible && boggleSolution && <List className={listClasses.root}>\n        {[0].map(sectionId =>\n          <li className={listClasses.listSection}>\n              {boggleSolutionMap.map(item => (\n                  <ListItemText primary={Array.from(wordsFound)[i++]} />\n              ))}\n          </li>\n        )}\n        </List>}\n      </header>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n//Material UI nested grid\nfunction NestedGrid({grid}) {\n  const classes = useStyles();\n\n  function FormRow({arr}) {\n    return (\n      <React.Fragment>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[0]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[1]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[2]}</Paper>\n        </Grid>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>{arr[3]}</Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n  return (\n    <div className={classes.root}>\n      <Grid container justify=\"center\" spacing={2}>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[0]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[1]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[2]}/>\n        </Grid>\n        <Grid container justify=\"center\" item xs={8} spacing={2}>\n          <FormRow arr={grid[3]}/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nfunction FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n\n\n\nconst listUseStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300,\n  },\n  listSection: {\n    backgroundColor: 'inherit',\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0,\n  },\n}));\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}